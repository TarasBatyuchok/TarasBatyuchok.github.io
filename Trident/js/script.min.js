function secretCode() {
  try {
    document.onkeydown = function (e) {
      return (
        123 != event.keyCode &&
        (!e.ctrlKey || !e.shiftKey || e.keyCode != "I".charCodeAt(0)) &&
        (!e.ctrlKey || !e.shiftKey || e.keyCode != "J".charCodeAt(0)) &&
        (!e.ctrlKey || e.keyCode != "U".charCodeAt(0)) &&
        void 0
      );
    };
  } catch {
    console.log("hide console.log");
  }
}
function preloader() {
  try {
    document.body.onload = function () {
      setTimeout(() => {
        const e = document.getElementById("preloader");
        e.classList.contains("done") || e.classList.add("done");
      }, 1500);
    };
  } catch {
    console.error();
  }
}
function cursor() {
  try {
    let e = document.getElementById("pet"),
      t = 0,
      o = 0,
      n = 0,
      r = 0;
    document.addEventListener("mousemove", function (e) {
      (t = e.clientX), (o = e.clientY);
    }),
      (n = window.innerWidth / 2),
      (r = window.innerHeight / 2),
      (e.style.left = n + "px"),
      (e.style.top = r + "px"),
      (function c() {
        let i = t - n,
          s = o - r;
        if (Math.abs(i) > 10 || Math.abs(s) > 10) {
          let t = Math.atan2(s, i),
            o = 10 * Math.cos(t),
            c = 10 * Math.sin(t);
          (n += o),
            (r += c),
            (e.style.left = n + "px"),
            (e.style.top = r + "px");
        }
        requestAnimationFrame(c);
      })();
  } catch {
    console.log(error);
  }
}
function dropdown() {
  try {
    const e = document.querySelector(".dropdown"),
      t = e.querySelector(".select"),
      o = document.querySelector(".caret"),
      n = document.querySelector(".menu"),
      r = e.querySelectorAll(".menu li"),
      c = e.querySelector(".selected");
    e.addEventListener("click", () => {
      t.classList.toggle("select-clicked"),
        n.classList.toggle("menu-open"),
        o.classList.toggle("caret-rotate");
    }),
      r.forEach((e) => {
        e.addEventListener("click", () => {
          c.innerText = e.innerText;
        });
      });
  } catch {
    console.log(error);
  }
}
function burgerMenu() {
  try {
    const e = document.querySelector(".burger-icon"),
      t = document.querySelector(".burger__button"),
      o = document.querySelector(".navbar__items");
    t.addEventListener("click", function () {
      document.body.classList.toggle("_lock"),
        e.classList.toggle("open"),
        o.classList.toggle("active");
    });
  } catch {
    console.log(error);
  }
}
function swiperSlider() {
  try {
    new Swiper(".swiper", { autoplay: { delay: 3e3 }, loop: !0 }),
      new Swiper(".slider-team", {
        slidesPerView: 1,
        spaceBetween: 10,
        loop: !0,
        navigation: {
          nextEl: ".slider-team__next",
          prevEl: ".slider-team__prev",
        },
      }),
      new Swiper(".in-media__slider", {
        slidesPerView: 3,
        spaceBetween: 30,
        breakpoints: {
          1200: { slidesPerView: 3, spaceBetween: 30 },
          992: { slidesPerView: 2, spaceBetween: 40 },
          500: { slidesPerView: 1, spaceBetween: 30 },
          320: { slidesPerView: 1, spaceBetween: 20 },
        },
        loop: !0,
        navigation: { nextEl: ".in-media__next", prevEl: ".in-media__prev" },
      });
  } catch {
    console.log(error);
  }
}
function year() {
  try {
    const e = document.querySelector("#year");
    (e.textContent = new Date().getFullYear()), console.log(e);
  } catch {
    console.log(error);
  }
}
secretCode(),
  preloader(),
  cursor(),
  dropdown(),
  burgerMenu(),
  swiperSlider(),
  year();
const tip = document.querySelector(".benefit-descriptions__tip"),
  hind = document.querySelector(".benefit-descriptions__tip-text");
tip.addEventListener("click", () => {
  hind.classList.toggle("active");
});
const textJoinCircle = document.querySelector(".orange-circle__text"),
  textJoinBlack = document.querySelector(".black-circle__text p");
function card() {
  try {
    const o = document.querySelectorAll(".card");
    for (let n = 0; n < o.length; n++) {
      const r = o[n];
      r.addEventListener("mousemove", e), r.addEventListener("mouseout", t);
    }
    function e(e) {
      const t = this.querySelector("#card-item"),
        o = t.offsetHeight / 2,
        n = t.offsetWidth / 2;
      t.style.transform =
        "rotateX(" +
        -(e.offsetY - o) / 15 +
        "deg) rotateY(" +
        (e.offsetX - n) / 15 +
        "deg)";
    }
    function t(e) {
      this.querySelector("#card-item").style.transform = "rotate(0)";
    }
  } catch {
    console.log(error);
  }
}
function rotateText() {
  try {
    const e = document.querySelector(".circle-text p"),
      t = document.querySelector(".text-coo p"),
      o = document.querySelector(".social__instagram-circle p"),
      n = document.querySelector(".social__telegram-circle p");
    (e.innerHTML = e.innerText
      .split("")
      .map(
        (e, t) => `<span style="transform:rotate(${3.7 * t}deg)">${e}</span>`
      )
      .join("")),
      (t.innerHTML = t.innerText
        .split("")
        .map(
          (e, t) => `<span style="transform:rotate(${3.7 * t}deg)">${e}</span>`
        )
        .join("")),
      (o.innerHTML = o.innerText
        .split("")
        .map(
          (e, t) => `<span style="transform:rotate(${6.5 * t}deg)">${e}</span>`
        )
        .join("")),
      (n.innerHTML = n.innerText
        .split("")
        .map(
          (e, t) => `<span style="transform:rotate(${6.5 * t}deg)">${e}</span>`
        )
        .join(""));
  } catch {
    console.log(error);
  }
}
(textJoinCircle.innerHTML = textJoinCircle.innerText
  .split("")
  .map((e, t) => `<span style="transform:rotate(${6.5 * t}deg)">${e}</span>`)
  .join("")),
  (textJoinBlack.innerHTML = textJoinBlack.innerText
    .split("")
    .map((e, t) => `<span style="transform:rotate(${6.5 * t}deg)">${e}</span>`)
    .join("")),
  card(),
  rotateText();
const timeLine = () => {
  try {
    const e = Array.from(document.querySelectorAll(".circle")),
      t = Array.from(document.querySelectorAll(".text-container")),
      o = document.querySelector(".time-line");
    new IntersectionObserver(
      function (o, n) {
        o.forEach((o) => {
          o.isIntersecting &&
            (e.forEach((e, o) => {
              setTimeout(() => {
                e.classList.remove("hidden"),
                  e.classList.add("visible"),
                  t[o].classList.add("visible");
              }, 650 * (o + 1));
            }),
            (function () {
              const o = document
                .querySelector(".time-line")
                .getBoundingClientRect();
              e.forEach((e, n) => {
                const r = t[n],
                  c = e.getBoundingClientRect(),
                  i = c.left - o.left,
                  s = c.top - o.top + c.height;
                (r.style.left = i - 50 + "px"), (r.style.top = `${s + 30}px`);
              });
            })(),
            document.querySelectorAll(".time-line path").forEach((e) => {
              e.classList.add("squiggle");
            }),
            n.unobserve(o.target));
        });
      },
      { root: null, rootMargin: "0px", threshold: 0.5 }
    ).observe(o);
  } catch {
    console.error();
  }
};
function update() {
  try {
    window.addEventListener("resize", (e) => {
      setTimeout(revealCircles, 0), setTimeout(positionTextContainers, 0);
    });
  } catch {
    console.log(error);
  }
}
timeLine();
